cmake_minimum_required(VERSION 2.8.3)
cmake_policy(SET CMP0046 OLD)
project(robot_self_filter)

add_compile_options(-std=c++11)

find_package(catkin REQUIRED COMPONENTS
  roscpp
  tf
  tf_conversions
  filters
  sensor_msgs
  visualization_msgs
  geometric_shapes
  urdf
  resource_retriever
  pcl_conversions
  shape_msgs
  cmake_modules
)

find_package(PCL REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(OpenMP REQUIRED)
find_package(PkgConfig REQUIRED)
find_package(Boost REQUIRED)
find_package(ASSIMP QUIET)
if (NOT ASSIMP_FOUND)
  pkg_check_modules(ASSIMP assimp)
endif()
if (ASSIMP_FOUND)
  if( ${ASSIMP_VERSION} STRGREATER "2.0.0" )
    set(IS_ASSIMP3 1)
    add_definitions(-DIS_ASSIMP3)
    message(STATUS "Found assimp v3")
  else()
    message(STATUS "Found assimp v2")
  endif()
  include_directories(${ASSIMP_INCLUDE_DIRS})
  link_directories(${ASSIMP_LIBRARY_DIRS})
else()
  message(STATUS "could not find assimp (perhaps available thorugh ROS package?), so assimping assimp v2")
  set(ASSIMP_LIBRARIES assimp)
  set(ASSIMP_LIBRARY_DIRS)
  set(ASSIMP_CXX_FLAGS)
  set(ASSIMP_CFLAGS_OTHER)
  set(ASSIMP_LINK_FLAGS)
  set(ASSIMP_INCLUDE_DIRS)
  set(IS_ASSIMP3 0) # most likely not
endif()

catkin_package(
  INCLUDE_DIRS include
  LIBRARIES ${PROJECT_NAME}
  CATKIN_DEPENDS
  roscpp
  tf
  tf_conversions
  filters
  sensor_msgs
  visualization_msgs
  geometric_shapes
  urdf
  resource_retriever
  pcl_conversions
  shape_msgs
  cmake_modules
  DEPENDS
)

include_directories(include ${catkin_INCLUDE_DIRS} ${EIGEN_INCLUDE_DIRS} SYSTEM ${PCL_INCLUDE_DIRS} ${OpenMP_INCLUDE_DIRS})

add_library(robot_self_filter src/self_mask.cpp)
target_link_libraries(robot_self_filter ${catkin_LIBRARIES})
add_dependencies(robot_self_filter assimp ${catkin_EXPORTED_TARGETS})

add_executable(test_filter src/test_filter.cpp)
target_link_libraries(test_filter ${PROJECT_NAME} ${catkin_LIBRARIES})

add_executable(self_filter src/self_filter.cpp)
target_link_libraries(self_filter ${PROJECT_NAME} ${catkin_LIBRARIES} ${PCL_LIBRARIES})

install(TARGETS ${PROJECT_NAME}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
)

install(TARGETS test_filter self_filter
        RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})

install(DIRECTORY include/${PROJECT_NAME}/
    DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION})

install(DIRECTORY launch
    DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
